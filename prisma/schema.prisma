// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int          @id @default(autoincrement())
  firstName       String
  lastName        String?
  email           String       @unique
  phone           String?
  imageUrl        String?
  withVisibleData Boolean?     @default(true)
  role            UserType     @default(CUSTOMER)
  location        Location?
  reviews         Review[]
  resturants      Restaurant[]
  categories      Category[]
  likes           Like[]
  orders          Order[]
}

enum UserType {
  SP
  CUSTOMER
}

model Review {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  rating       Int
  comment      String?
  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId Int?
  likes        Like[]
  // TODO To be implemented
  // answers      Comment[]   @relation("answers")
  // responseToId String?
  // responseTo   Comment?    @relation("answers", fields: [responseToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Restaurant {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String?
  slogan      String?
  description String?
  imageUrl    String?
  isCashOnly  Boolean    @default(false)
  isVisible   Boolean    @default(true)
  offer       String?
  menu        Dish[]
  locations   Location[]
  schedules   Schedule[]
  user        User?      @relation(fields: [userId], references: [id])
  userId      Int?
  categories  Category[]
  reviews     Review[]
  orders      Order[]
  events      Event[]
}

model Dish {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  name         String
  description  String?
  imageUrl     String?
  price        Float?
  ingredients  String?
  isVegan      Boolean     @default(false)
  isGlutenFree Boolean     @default(false)
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId Int?
  OrderItem    OrderItem[]
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Schedule {
  id           Int         @id @default(autoincrement())
  opening_hour String?     @default("9:00")
  closing_hour String?     @default("11:30")
  day          WeekDay?
  isOpen       Boolean?    @default(true)
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int?
}

model Location {
  id               Int         @id @default(autoincrement())
  streetName       String?
  streetNumber     String?
  zip              String?
  city             String?
  country          String?
  lat              String?
  lon              String?
  formattedAddress String?
  isMainLocation   Boolean     @default(false)
  restaurant       Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId     Int?
  event            Event?
  user             User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int?        @unique
}

model Category {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  name        String       @unique
  user        User?        @relation(fields: [userId], references: [id])
  userId      Int?
  restaurants Restaurant[]
}

model Like {
  id       Int     @id @default(autoincrement())
  user     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  review   Review? @relation(fields: [reviewId], references: [id])
  reviewId Int?
}

model Event {
  id           Int         @id @default(autoincrement())
  name         String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  date         DateTime?
  opening_hour String?     @default("9:00")
  closing_hour String?     @default("11:30")
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId Int?
  location     Location?   @relation(fields: [locationId], references: [id])
  locationId   Int?        @unique
}

model Order {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deliveryAt   DateTime?
  isAccepted   Boolean     @default(false)
  isCancelled  Boolean     @default(false)
  items        OrderItem[]
  user         User?       @relation(fields: [userId], references: [id])
  userId       Int?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId Int?
}

model OrderItem {
  id      Int    @id @default(autoincrement())
  units   Int    @default(0)
  dish    Dish?  @relation(fields: [dishId], references: [id])
  dishId  Int?
  order   Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId Int?
}
