// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  firstName       String
  lastName        String?
  email           String       @unique
  phone           String?
  withVisibleData Boolean?     @default(true)
  role            UserType     @default(CUSTOMER)
  reviews         Review[]
  resturants      Restaurant[]
  categories      Category[]
  likes           Like[]
}

enum UserType {
  SP
  CUSTOMER
}

model Review {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  rating       Int
  comment      String?
  user         User?       @relation(fields: [userId], references: [id])
  userId       String?     @db.ObjectId
  // answers      Comment[]   @relation("answers")
  // responseToId String?     @db.ObjectId
  // responseTo   Comment?    @relation("answers", fields: [responseToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?     @db.ObjectId
  likes        Like[]
}

model Restaurant {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String?
  slogan      String?
  description String?
  isCashOnly  Boolean    @default(false)
  menu        Dish[]
  locations   Location[]
  schedules   Schedule[]
  user        User?      @relation(fields: [userId], references: [id])
  userId      String?    @db.ObjectId
  category    Category?  @relation(fields: [categoryId], references: [id])
  categoryId  String?    @db.ObjectId
  reviews     Review[]
}

model Dish {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  name         String
  description  String?
  price        Float?
  ingredients  Ingredient[]
  isVegan      Boolean      @default(false)
  isGlutenFree Boolean      @default(false)
  restaurant   Restaurant?  @relation(fields: [restaurantId], references: [id])
  restaurantId String?      @db.ObjectId
}

model Ingredient {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  dish   Dish?   @relation(fields: [dishId], references: [id])
  dishId String? @db.ObjectId
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Schedule {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  opening_hour String?     @default("9:00")
  closing_hour String?     @default("11:30")
  day          WeekDay?
  isOpen       Boolean?    @default(true)
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?     @db.ObjectId
}

model Location {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  streetName     String?
  streetNumber   String?
  zip            String?
  city           String?
  country        String?
  isMainLocation Boolean     @default(false)
  restaurant     Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId   String?     @db.ObjectId
}

model Category {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique
  createdBy   User?        @relation(fields: [createdById], references: [id])
  createdById String?      @db.ObjectId
  restaurants Restaurant[]
}

model Like {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  isLiked  Boolean @default(true)
  user     User?   @relation(fields: [userId], references: [id])
  userId   String? @db.ObjectId
  review   Review? @relation(fields: [reviewId], references: [id])
  reviewId String? @db.ObjectId
}
